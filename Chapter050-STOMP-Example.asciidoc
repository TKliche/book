[[ch_stomp_example]]
== STOMP Example

[role="lead"]
In this chapter, we develop a mobile app on iOS that will send the GPS data of
the device and displays orders.

=== Wildcard Subscription

Before we start writing the iOS app that will send the GPS data, we can create a simple message consumer using +telnet+ that will
consume the message sent by the app.

As descibed in <<ch_example_app_topology>>, each app will sent its GPS data on a topic named +truck.XXX.data+ where +XXX+ is the truck identifier.

We want to write a client that consume messages for _any_ truck without having to list all of them explicitly.

STOMP leaves the semantic of the destination to the STOMP broker implementations and it turns out that most of them
support _wildcards_.

For example, ActiveMQ supports  http://activemq.apache.org/wildcards.html[wildcards]:

* +.+ is used to separate names in a path
* +$$*$$+ is used to match any name in a path
* +>+ is used to recursively match any destination starting from this name

With our example using ActiveMQ, we can use this notation to listen for any
truck GPS data by subscribing to the +truck.$$*$$.data+ topic (where +$$*$$+ stands for _any truck identifier_).
Note that using the wildcard +truck.>+ would have not been correct since it would subscribe to any destination starting
with +truck.+ such as the queue used by the truck to receive orders (for example +truck.AAA.orders+).
This client is only interested by GPS data and not by any other destination related to the truck. Using the +truck.$$*$$.data+ wildcard matches
exactly this constraint.

[[ex_stomp_example_telnet]]
.Subscribe to the widlcard destination +/topic/truck.$$*$$.data+
====
++++
<screen>
$ <userinput>telnet localhost 61613</userinput>
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
<userinput>CONNECT
accept-version:1.2
heart-beat:0,0<co xml:id="co.ex_stomp_example_telnet_1"/>
login:user
passcode:password

</userinput>^@

CONNECTED
heart-beat:0,0
session:ID:retsina.local-61690-1380810104254-2:4
server:ActiveMQ/5.8.0
version:1.2

<userinput>SUBSCRIBE
destination:/topic/truck.*.data<co xml:id="co.ex_stomp_example_telnet_2"/>
id:sub1

</userinput>^@
</screen>
<calloutlist>
  <callout arearefs="co.ex_stomp_example_telnet_1">
    <para>Heart-beat is disabled so that the telnet client can remain open without sending periodical heart-beats to the broker</para>
  </callout>
  <callout arearefs="co.ex_stomp_example_telnet_2">
    <para>We subscribe to the wildcard destination <literal>/topic/truck.*.data</literal>. Note that we must prefix the topic name
<literal>truck.*.data</literal> by <literal>/topic/</literal> to follow ActiveMQ convention (as described in the note in <xref linkend="ch_stomp_send_message" />)</para>
  </callout>
</calloutlist>
++++
====

The +telnet+ client can now consume any messages sent to a destination of the form +/topic/truck.$$*$$.data+.

To verify this, let's open a _second_ telnet client that will send a message corresponding to the position of the
+AAA+ truck.

As shown in <<ex_example_gps_data>>, the message payload will be a JSON string:

----
{
  "truck":"AAA",
  "lat":48.8581,
  "lng":2.2946,
  "ts":"2013-09-23T08:43Z"
}
----

[[ex_stomp_example_telnet_sender]]
.Send a message to the +truck.AAA.data+ topic
====
++++
<screen>
$ <userinput>telnet localhost 61613</userinput>
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
<userinput>CONNECT
accept-version:1.2
heart-beat:0,0
login:user
passcode:password

</userinput>^@

CONNECTED
heart-beat:0,0
session:ID:retsina.local-61690-1380810104254-2:4
server:ActiveMQ/5.8.0
version:1.2

<userinput>SEND
content-type:application/json
destination:/topic/truck.AAA.data<co xml:id="co.ex_stomp_example_telnet_sender_1"/>
content-length:67

{"truck":"AAA","lat":48.8581,"lng":2.2946,"ts":"2013-09-23T08:43Z"}</userinput>^@
</screen>
<calloutlist>
  <callout arearefs="co.ex_stomp_example_telnet_sender_1">
    <para>The message is sent to the topic <literal>truck.AAA.data</literal></para>
  </callout>
</calloutlist>
++++
====

Once this message is sent, we can see that the first +telnet+ client has received it:

[[ex_stomp_example_telnet_receiver]]
.Receive a message from a wildcard subscription
====
++++
<screen>
MESSAGE
content-type:application/json
message-id:ID\cretsina.local-61690-1380810104254-2\c6\c-1\c1\c9
destination:/topic/truck.AAA.data<co xml:id="co.ex_stomp_example_telnet_receiver_1"/>
timestamp:1380815240205
expires:0
subscription:sub1
content-length:67
priority:4

{"truck":"AAA","lat":48.8581,"lng":2.2946,"ts":"2013-09-23T08:43Z"}
</screen>
<calloutlist>
  <callout arearefs="co.ex_stomp_example_telnet_receiver_1">
    <para>The <literal>destination</literal> header corresponds to the actual destination. It can be used to distinguish
the different destinations matching the wildcard subscription.</para>
  </callout>
</calloutlist>
++++
====

We can leave the first +telnet+ client open to check that our iOS app will properly send the data messages.

=== Truck Tracker iOS app

We will use https://developer.apple.com/xcode/[Xcode] to create the +TruckTracker+ application.

==== Create Xcode project

Once Xcode is installed and started, we create a new project from its launch screen:

[[img_stomp_example_1]]
.Select **`Create a new Xcode project" from Xcode launch screen**`.
image::images/img_stomp_example_1.png["XCode Launch screen"]

The application consists in a single view so we choose the **`Single View Application`** template in iOs > Application from the template screen.

[[img_stomp_example_2]]
.Select iOs > Application > **`Single View Application`**.
image::images/img_stomp_example_2.png["XCode template screen"]

We will call the project **`TruckTracker`** and select to build it only for iPhone devices.

[[img_stomp_example_3]]
.XCode project options screen
image::images/img_stomp_example_3.png["XCode project options screen"]

Finally we will save it in a folder on our machine.

==== Create the Podfile

To import the library that we will use to send and receive messages, we will setup the project to use _CocoaPods_, an Objective-C Library Manager.

First we need to close Xcode because we will modify the project structure to import our dependencies.

After we have installed CocoaPods using the instructions on http://cocoapods.org[its web site], we create a file at the root of the project (in the same directory than **`TruckTracker.xcodeproj`**) named _Podfile_

[[ex_stomp_example]]
.TruckTracker's Podfile
====
----
xcodeproj 'TruckTracker.xcodeproj'<1>

pod 'StompKit', :git => 'https://github.com/mobile-web-messaging/StompKit.git'<2>

platform :ios, '5.0'<3>
----
<1> _TruckTracker.xcodeproj_ is the directory created by Xcode to store the project.
<2> StompKit is the Objective-C library that we will used to send and receive STOMP messages
<3> The application is able to run on iOS 5 and above.
====

After this file is saved, run the **`pod install command`**

[[ex_stomp_example]]
.Install TruckTracker dependencies
====
----
$ pod install
Analyzing dependencies
Pre-downloading: `StompKit` from `https://github.com/mobile-web-messaging/StompKit.git`
Downloading dependencies
Installing CocoaAsyncSocket (7.3.2)
Installing StompKit (0.1.0)
Generating Pods project
Integrating client project

[!] From now on use `TruckTracker.xcworkspace`.
----
====

We can now open again Xcode but we must do it using the *worspace* file named **`TruckTracker.xcworkspace`**, not the *project* file **`TruckTracker.xcodeproj`**.

[[img_stomp_example_4]]
.Open the workspace file
image::images/img_stomp_example_4.png["Open the workspace file"]

First, let's make sure that the project is setup correctly and that the application can run in the iOS simulator.

We will simulate the latest iPhone devices by selecting **`Product`** > **`Destination`** > **`iPhone Retina (4-inch 64-bit)`** from Xcode menu bar.
If we run the application by selecting **`Product`** > **`Run`** (or pressing **`âŒ˜R`**), the iOS simulator starts and opens the application which is composed of a blank view.

[[img_stomp_example_5]]
.TruckTracker Blank View
image::images/img_stomp_example_5.png["TruckTracker Blank View"]

==== Design the User Interface

TODO

==== integrate StompKit


TODO
