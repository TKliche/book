[[ch_introduction_example]]
=== Truck Tracker Application

Let's take the example of a delivery company like UPS that manages a fleet of trucks.
Each truck is responsible for the delivery of packages.
They receive orders from their headquarter to:

* fetch packages at the company's warehouses
* deliver packages to the customer's addresses

To manage efficiently all the trucks, the company head quarters want to monitor the truck's positions and be able to send them orders on-the-go.

Each truck will use a mobile application, the _Truck App_, to broadcast its geolocation data (using the GPS sensor of the mobile device runnig the application).
This application will also let them receive orders from the headquarter.

The company's headquarter will use a Web application, the _Control Center_, that displays the position of all the trucks on a map.
This Web application will also be used to send orders to a given truck.
There will be many _Control Center_ applications running at the same time: one for each administrator managing the fleets.

This application will be composed all along the book after each chapter that introduces the required information to write the application.

. In <<ch_mobile_messaging_stomp>>, we will write the _Truck App_ as an iOS application using the STOMP protocol to send GPS data and receive orders from an iOS device.
. In <<ch_web_messaging_stomp>>, we will write the Web _Control Center_ using STOMP protocol over Web Sockets to receive GPS data in a Web browser and send orders to the trucks.

[[img_example_app_1]]
.The +Truck Tracker+ application with two trucks, +AAA+ and +BBB+ and one +Control Center+.
image::images/Chapter011/example_diagram_1.png["Diagram of the Truck Tracker application"]

Before introducing the messaging protocols that will be used by the application, we can already define 
the application's messaging topology and how the different parts of the application will exchange messages.

[[ch_introduction_example_topology]]
==== Messaging Topology

Each truck will be associated to 2 destinations:

* a topic to broadcast its GPS data: +truck.XXX.data+ where +XXX+ is the truck identifier
* a queue to receive orders (where to go, which package to pick, etc.): +truck.XXX.orders+

A topic is used to send the GPS data as this allows potentially many consumers to receive the information.

However a queue is used to handle the truck's orders as only one single truck will consume messages from this destination.
It does not make sense for any other consumers to receive it.

Each +Truck App+ will be:

* a _producer_ of messages to the topic +truck.XXX.data+
* a _consumer_ of messages from the queue +truck.XXX.orders+

Conversely, the +Control Center+ Web application will be:

* a _consumer_ of messages from all the topics +truck.XXX.data+
* a _producer_ of message from the queues +truck.XXX.orders+

[[ch_introduction_example_message]]
==== Message Representation

There will be two types of exchanged messages:

* one to represent GPS data (sent to the topics +truck.XXX.data+)
* one to represent orders (sent to the queues +truck.XXX.orders+)

===== Geolocation messages
The Truck app will send the GPS data using a JSON representation:

[[ex_example_gps_data]]
.Geolocation data representation
====
----
{
  "truck": "BBB",<1>
  "lat": 48.8581,<2>
  "lng": 2.2946,<3>
  "ts": "2013-09-23T08:43Z"<4>
}
----
<1> +truck+ is the identifier of the truck that sends its position
<2> +lat+ is a number representing the position's _latitude_
<3> +lng+ is a number representing the position's _longitude_
<4> +ts+ is a string representing the time when the position was taken (using the http://en.wikipedia.org/wiki/ISO_8601[ISO 8601] format)
====

===== Order messages
The order messages will be also be represented using JSON with a single +order+ attribute:

[[ex_example_order]]
.Order data representation
====
----
{
  "order": "Go to warehouse #1"<1>
}
----
====

A more realistic representation of this message would also contain the position of the destination address but this
format is enough to provide a first version.

With the messaging topology and data representation known, we can already refine the application diagram.

[[img_example_app_2]]
.The +Truck Tracker+ application's data workflow.
image::images/Chapter011/example_diagram_2.png["Diagram of the Truck Tracker application data worflow"]

