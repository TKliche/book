[[ch_example_app]]
== Example Application

[role="lead"]
In this chapter, we present the application that will be built all along the book, the _Truck Tracker_.

Let's take the example of a company like UPS that manages a fleet of trucks. Each truck is responsible for the delivery of packages.

They take orders to:

* fetch packages at the company's warehouses
* deliver packages to the customer's addresses

To manage efficiently all the trucks, the company head quarters want to monitor the truck moves and be able to send them orders on the go.

Each truck will use a mobile application, the _Truck App_, to broadcast its geolocation data (using the GPS sensor of the mobile device).
This application will also let them receive orders.

The company's head quarter will use a Web application, the _Control Center_, that displays the position of all the trucks on a map.
This Web application will also be used to send orders to a given truck.

This application will be composed all along the book after each chapter introduced the corresponding messaging features
required to write the application's parts.

In <<ch_stomp_example>>, we will write the _Truck App_ as an iOS application using the STOMP protocol to send GPS data and receive orders from an iOS device.

In <<ch_stomp_ws_example>>, we will write the Web _control center_ using STOMP protocol over Web Sockets to receive GPS data
in a Web browser and send orders to the trucks.

=== Messaging Topology

Each truck will be associated to 2 destinations:

* a topic to broadcast its GPS data: +/topic/truck/XXX/data+ where +XXX+ is the truck identifier
* a queue to receive destinations: +/queue/truck/XXX/orders+

A topic is used to send the GPS data as this allows potentially many consumers to receive the information.

However a queue is used to handle the truck's order as only one single truck will consume messages from this destination.
It does not make sense for any other consumers to receive it.

Each +Truck App+ will be:

* a producer of messages to the topic +/topic/truck/XXX/data+
* a consumer of messages from the queue +/queue/truck/XXX/orders+

Conversely, the +Control Center+ Web application will be:

* a consumer of messages from all the topics +/topic/truck/XXX/data+
* a producer of message from the queues +/queue/truck/XXX/orders+

[[img_example_app]]
.The +Truck Tracker+ application with two trucks, +AAA+ and +BBB+
image::images/mobilewebmsg_app_diagram.png["Diagram of the Truck fleet application"]

=== Message Representation

There will be two types of exchanged messages:

* one to represent GPS data (sent to the topics +/topic/truck/XXX/data+)
* one to represent orders (sent to the queues +/queue/truck/XXX/orders+)

.Geolocation messages
The Truck app will send the GPS data using a JSON representation:

[[ex_example_gps_data]]
.Geolocation data representation
====
----
{
  'lat': 48.8581,<1>
  'lng': 2.2946,<2>
  'ts': "2013-09-23T08:43Z"<3>
}
----
<1> +lat+ is a number representing the position's _latitude_
<2> +lng+ is a number representing the position's _longitude_
<3> +ts+ is a string representing the time when the position was taken (using the http://en.wikipedia.org/wiki/ISO_8601[ISO 8601] format)
====

.Order messages
To keep things simple, the order messages will be represented as simple text with natural language:

[[ex_example_order]]
.Order data representation
====
----
"go to warehouse #1"
"deliver package #1234 to customer at the address XXX"
----
====
