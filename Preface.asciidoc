[preface]
== Preface

I wrote this book to tell you about a simple and powerful technology that has been used with success in the enterprise for many years and starts to be used in new environments like the Web and mobile devices.
This technology is messaging. It has been one of the buildings block that let heterogeneous services and platforms communicate with each other.

=== Messaging is Simple

At its core, the messaging concepts are simple: an application _sends_ a _message_ to a _destination_. Independently (at another time, on another machine), another application subscribes to this same destination to _consume_ the message.

In two sentences, I introduced the four concepts that are (almost) all there is to know about messaging:

* a _message_ is the data that are exchanged between applications
* a _destination_ is the entity that will handle the messages and distribute them
* a _sender_ is an application that sends _messages_ *to* a _destination_
* a _consumer_ is an application that consume _messages_ *from* a _destination_

The simplicity of messaging can be deceiving but it's this simplicity that allows to use it in powerful, sometimes complex ways.

One key aspect of messaging is that it couples very loosely its participants. The sender and consumer know nothing of each other. When one application sends a message, it has no knowledge on
when or where the message will be consumed and who will consume it.
Likewise, when an application consumes a message, it does not know which application sent it.
Senders and consumers do not even need to be online at the same time. The sender can send a message and exit. The message will be held by the destination until a consumer subscribes to the destination. At this moment, the destination will deliver the message to the consumer.

=== Enterprise Messaging Is Not So Simple

When companies are acquired or merged, they need  a way to enable communication between their systems. Messaging is one approach to achieve this integration in a non-obstrusive way. 
The systems must agree on the data representation (transmitted by the _message_) and the _destination_ (or the topic of interest shared by the different systems).

With its use in entreprise software, messaging technology and their underlying protocols became increasingly complex to meet entreprise requirements (high-availability, failover, load-balancing, etc.).

Besides, the integrated applications must often agreed on a messaging systems to use throughout the company. In the Java world, the specification that deals with messaging is called JMS (Java Message Service). It defines a set of interfaces that a Java application can use to send and receive messages. However, JMS does not define any protocol (how the bytes are sent over the wire) and leave this implementation detail to the JMS brokers that implement the API. This also means that JMS implementations are not interoperable: one must use the broker implementation to send a message to the broker. If applications were using different brokers, they had interoperability issues and must use *bridges* to transfer messages from one broker to another. This lack of interoperability brings complexity.

Over time, we have seen the appearances of entreprise messaging protocols such as AMQP (Advanced Message Queuing Protocol) that handles enterprise features and interoperability. This leads to complex protocols that are difficult to implement and whose interoperability is subjective (backwards compatibility is not guaranteed, different implementations may not implement the whole specification leading to interoperability issues).

=== Mobile Messaging Is Simple Again

Meanwhile, we have also watched the advent of messaging protocols which more constrained goals that turns out to be simpler and more efficient to use.

In this book, I will talk about two of them, STOMP and MQTT.

While these protocols does not provide all the features offered by enterprise messaging, they can still be very useful for most cases. 

STOMP really shines for its simplicity if you need to send one text message from any system (operation system, virtual machines, web browsers) to another. It is simple enough that a telnet client *is* a STOMP client.

MQTT stands for MQ Telemetry Transport and really shines to broadcast data from small devices with low power usage and constrained memory resources.

Since these protocols are often simple to implement by messaging brokers, they often provide both of them. This allows to send a message using STOMP from an application and consume the same message from another application using MQTT. The applications are free to use the best messaging protocols for their needs and rely on the broker implementations for the interoperability. Since these protocols are also interoperable, messages can also flow from one broker implementation to another without the need for any additional components such as bridges.

With the advent of mobile devices, there are a new set of applications (both native and Web-based) that can use these simple messaging protocols to create applications.

=== What's in This Book

In this book, I'll make a tour of messaging protocols for mobile devices and Web applications.

Chapter 1, Introduction::
In this chapter, I introduce the concepts of messaging protocols, how they differ from request/reply protocols such as HTTP.
To illustrate the use of messaging protocols on mobile and Web platforms, we will build an application with 2 parts: one will run on mobile devices, the other inside a Web browser and they will communicate using messages. This chapter explains the overall design of this application.

Chapter 2, Mobile Messaging With STOMP on iOS::
In this chapter, I present STOMP, a simple text-based messaging protocol. I use StompKit, an iOS client for STOMP, to build an app that sends GPS data from the device and receives messages.

Chapter 3, Web Messaging With STOMP::
In this chapter, we introduce stomp.js, a JavaScript client for STOMP, and write a Web application that sends and receives messages from a Web browser.

Chapter 4, Advanced STOMP::
In this chapter, we present the advanced features of STOMP that we did not use in the previous chapters. 

Chapter 5, Mobile Messaging With MQTT::
In this chapter, we introduce MQTT, a binary messaging protocol well suited to broadcast data from mobile or embedded devices.
We write a mobile app on iOS that uses MQTT to broadcast information.

Chapter 6, Web Messaging With MQTT::
In this chapter, we use MQTT over Web Socket to write a Web application that sends and receives MQTT messages from a Web browser.

Chapter 7, Advanced MQTT::
In this chapter, I present the advanced features of MQTT that we did not use in the previous chapters. 

Appendix A, ActiveMQ::
In this appendix, we explain how to install and configure the messaging broker, Apache ActiveMQ, that is used all along the book to run the examples.

.What Should I Read?
[NOTE]
====
The book is organized to be read in the order but some chapters can be skipped depending on your experience.
We suggest to start with the Chapter 1 that introduces all the concepts discussed throughout the book.

If you are interested to write mobile applications, you can focus on Chapters 2 and 5 that present two different messaging protocols for mobile devices.
If you are writing Web applications, the Chapters 3, and 6 are the most relevant.

If you are interested to use the STOMP protocol, the Chapters 2, 3, and 4 and the most relevant. If you are interested by MQTT instead, you can read the Chapters 5, 6, and 7 instead.
====

=== Adminstrative Notes

This book is an introduction to the STOMP and MQTT messaging protocols and assumes no prior experience with them.
This books explains in details the messaging protocols. Each platform's clients may provide a different API to deal with the protocols but the underlying concepts will remain the same.
For both protocols, we will see two different libraries: an Objective-C library for iOS and a JavacScript library for Web applications

Basic programming skills are required. The examples in the book runs on different platforms and we used the programming language that made the most sense for each of them.
To build a mobile application on iOS, we wrote the example using Objective-C. The Web application uses the JavaScript language.

The examples can all be downloaded from the https://github.com/mobile-web-messaging/book/[book's GitHub repository].

=== Conventions Used in This Book

The following typographical conventions are used in this book:

_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.

**`Constant width bold`**:: Shows commands or other text that should be typed literally by the user.

_++Constant width italic++_:: Shows text that should be replaced with user-supplied values or by values determined by context.


[TIP]
====
This icon signifies a tip, suggestion, or general note.
====

[WARNING]
====
This icon indicates a warning or caution.
====

=== Using Code Examples
++++
<remark>PROD: Please reach out to author to find out if they will be uploading code examples to oreilly.com or their own site (e.g., GitHub). If there is no code download, delete this whole section.</remark>
++++

Supplemental material (code examples, exercises, etc.) is available for download at link:$$http://examples.oreilly.com/<ISBN>-files/$$[].

This book is here to help you get your job done. In general, if example code is offered with this book, you may use it in your programs and documentation. You do not need to contact us for permission unless you’re reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from O’Reilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission.

We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: “_Book Title_ by Some Author (O’Reilly). Copyright 2012 Some Copyright Holder, 978-0-596-xxxx-x.”

If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at pass:[<email>permissions@oreilly.com</email>].

=== Safari® Books Online

[role = "safarienabled"]
[NOTE]
====
pass:[<ulink role="orm:hideurl:ital" url="http://my.safaribooksonline.com/?portal=oreilly">Safari Books Online</ulink>] is an on-demand digital library that delivers expert pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/content">content</ulink>] in both book and video form from the world&#8217;s leading authors in technology and business.
====

Technology professionals, software developers, web designers, and business and creative professionals use Safari Books Online as their primary resource for research, problem solving, learning, and certification training.

Safari Books Online offers a range of pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/subscriptions">product mixes</ulink>] and pricing programs for pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/organizations-teams">organizations</ulink>], pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/government">government agencies</ulink>], and pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/individuals">individuals</ulink>]. Subscribers have access to thousands of books, training videos, and prepublication manuscripts in one fully searchable database from publishers like O’Reilly Media, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, Course Technology, and dozens pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/publishers">more</ulink>]. For more information about Safari Books Online, please visit us pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/">online</ulink>].

=== How to Contact Us

Please address comments and questions concerning this book to the publisher:

++++
<simplelist>
<member>O’Reilly Media, Inc.</member>
<member>1005 Gravenstein Highway North</member>
<member>Sebastopol, CA 95472</member>
<member>800-998-9938 (in the United States or Canada)</member>
<member>707-829-0515 (international or local)</member>
<member>707-829-0104 (fax)</member>
</simplelist>
++++

We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at link:$$http://www.oreilly.com/catalog/<catalog page>$$[].

++++
<remark>Don't forget to update the link above.</remark>
++++

To comment or ask technical questions about this book, send email to pass:[<email>bookquestions@oreilly.com</email>].

For more information about our books, courses, conferences, and news, see our website at link:$$http://www.oreilly.com$$[].

Find us on Facebook: link:$$http://facebook.com/oreilly$$[]

Follow us on Twitter: link:$$http://twitter.com/oreillymedia$$[]

Watch us on YouTube: link:$$http://www.youtube.com/oreillymedia$$[]

=== Acknowledgments

++++
<remark>Fill in...</remark>
++++
