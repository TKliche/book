[preface]
== Preface

This is a book about _messaging_ protocols and how software developers can use them to build more responsive, resilient applications running on mobile devices and Web browsers.

Messaging protocols are nothing new. This simple and powerful technology has been used with success in the enterprise software for many years. It has been one of the buildings block that let heterogeneous services and platforms communicate with each other.
With the advent of mobile devices and the Web, it now appears that some of the strength of messaging protocols make them ideally suited for these platforms for a certain class of applications.

Nowadays, HTTP has emerged as the mainstream transport protocol and is extensively used to communicate betwen any clients (on the desktop, in mobile apps, obviously from Web browser) and Web servers. It has replaced almost all proprietary or non standard protocols and is the de facto choice if your application needs to communicate with something else.

Messaging protocols _complement_ HTTP and this book will show cases where using a messaging protocol is better suited than using HTTP (or any other request/reply transport protocol).

=== Messaging is Simple

At its core, the messaging concepts are simple: an application _sends_ a _message_ to a _destination_ on a _broker_. Independently (at another time, on another machine), another application subscribes to this same destination to _consume_ the message.

In two sentences, I introduced the five concepts that are (almost) all there is to know about messaging:

* a _message_ is the data that are exchanged between applications
* a _destination_ is a type of address that is used to exchange messages
* a _sender_ is an application that sends _messages_ *to* a _destination_
* a _consumer_ is an application that consumes _messages_ *from* a _destination_
* a _broker_ is the server entity that will handle messages from producers and distribute them to the consumers according to their destinations.

[[img_preface_messaging_concepts]]
.Messaging Concepts
image::images/Preface/messaging_concepts.png["Diagram of the messaging concepts"]

The simplicity of messaging can be deceiving but it is this simplicity that allows to use it in powerful, sometimes complex ways.

One key aspect of messaging is that it couples very loosely its participants. The sender and consumer know nothing of each other. When one application sends a message, it has no knowledge on when or where the message will be consumed.
There may be one or many consumers that will receive the message. It also possible that the message will not be consumed at all if nobody has registered any interest for it.

Likewise, when an application consumes a message, it does not know which application sent it.

Senders and consumers do not even need to be online at the same time. The sender can send a message and exit. The message will be held by the broker until a consumer subscribes to the same destination. At that moment, the broker will deliver the message to the consumer.

Senders and consumers need to know about the broker to connect to it but they may even not connect to the same broker. A set of brokers can constitute a cluster and messages would flow from one to another before it is finally delivered to a consumer.

Messaging protocol is a simple idea. Most of the complexity of using it is figuring out the best suited _topology_ for your applications (the type of destinations to use). This book will show the two topologies that are most commonly used to build messaging applications: _queues_ and _topics_.

=== Enterprise Messaging Is Not So Simple

When companies are acquired or merged, they need a way to enable communication between their systems. Messaging is one approach to achieve this integration in a non-obstrusive way. 
The systems must agree on the data representation (transmitted by the _message_) and the _destination_ (or the topic of interest shared by the different systems).

With its use in entreprise software, messaging technology and their underlying protocols became increasingly complex to meet entreprise requirements (high-availability, failover, load-balancing, etc.).

Besides, the integrated applications must often agreed on a messaging system to use throughout the company. In the Java world, the specification that deals with messaging is called JMS (Java Message Service). It defines a set of interfaces that a Java application can use to send and receive messages. However, JMS does not define any protocol (how the bytes are sent over the wire) and leave this implementation detail to the JMS brokers that implement the API. This means that JMS implementations are not interoperable: one must use the broker's client implementation to send a message to the broker. If applications were using different brokers, they had interoperability issues and must use _bridges_ to transfer messages from one broker to another. This lack of interoperability brings complexity as you need to add servers to host the bridges, make them redundant for high-availability, etc.

Over time, we have seen the appearances of entreprise messaging protocols such as AMQP (Advanced Message Queuing Protocol) that handles enterprise features and interoperability. This leads to complex protocols that are difficult to implement and whose interoperability is subjective (backwards compatibility is not guaranteed, different implementations may not implement the whole specification leading to interoperability issues).

=== Mobile Messaging Is Simple Again

Meanwhile, we have also watched the advent of messaging protocols with more constrained goals that turns out to be simpler and more efficient to use.

While these protocols does not provide all the features offered by enterprise-class messaging protocols, they can still be very useful for most cases for mobile and Web platforms. 

In this book, I will talk about two of them, STOMP and MQTT.

STOMP really shines for its simplicity if you need to send one text message from any system (operating system, virtual machines, web browsers) to another.
It is simple enough that a +telnet+ client _is_ a STOMP client.

MQTT stands for MQ Telemetry Transport and was created to broadcast data from small devices with low power usage and constrained memory resources. It is well suited for mobile devices since it will preserve battery life and memory.

These protocols are simple to understand and implement. Messaging brokers often provide both of them. This allows to send a message using STOMP from an application and consume the same message from another application using MQTT. The applications are free to use the best messaging protocols for their needs 
and rely on the broker implementations for the interoperability.

With the advent of mobile devices, we can use these simple messaging protocols to build more reactive, efficient set of applications either natively or Web-based.

At the same time, we can leverage these messaging protocols to integrate with legacy systems too. If the messaging broker also supports enterprise-class messaging API (such as JMS) or protocols (such as AMQP), we can build mobile and Web applications that can consumes messages sent from legacy systems.

=== What's in This Book

In this book, I will make a tour of messaging protocols for mobile devices and Web applications.

Chapter 1, Introduction::
In this chapter, I introduce the concepts of messaging protocols, how they differ from request/reply protocols such as HTTP.
To illustrate the use of messaging protocols on mobile and Web platforms, we will build 2 applications (one using STOMP and the other using MQTT).
Both applications will come in two parts: one will run on mobile devices, the other inside a Web browser and they will communicate using messages. This chapter explains the overall design of these two example applications.

Chapter 2, Mobile Messaging With STOMP::
In this chapter, I present STOMP, a simple text-based messaging protocol. I use StompKit, an iOS library for STOMP, to build an app that sends GPS data from the device and receives messages.

Chapter 3, Web Messaging With STOMP::
In this chapter, we introduce stomp.js, a JavaScript library for STOMP, and write a Web application that receives messages with the GPS from the iOS devices and display them on a map. This Web application will also send messages to the mobile app.

Chapter 4, Advanced STOMP::
In this chapter, we present the advanced features of STOMP that we did not use in the previous chapters to build our applications. These advanced features are not always used by messaging applications but they may prove useful as the applications grow in complexity. 

Chapter 5, Beyond STOMP::
In this chapter, we present features that are not part of STOMP but available from some STOMP brokers. These features often helps solve common issues and reduces complexity of the applications by leveraging the brokers.

Chapter 6, Mobile Messaging With MQTT::
In this chapter, we introduce MQTT, a binary messaging protocol well suited to broadcast data from mobile or embedded devices.
We write a mobile app on iOS that uses MQTT to broadcast information using the MQTTKit libary.

Chapter 7, Web Messaging With MQTT::
In this chapter, we use MQTT over Web Socket to write a Web application that sends and receives MQTT messages from a Web browser.

Chapter 8, Advanced MQTT::
In this chapter, I present the advanced features of MQTT that we did not use in the previous chapters but that you may encounter as you use it more extensively.

Appendix A, ActiveMQ::
In this appendix, we explain how to install and configure the messaging broker, Apache ActiveMQ, that is used in the book to run the STOMP examples.

.What Should I Read?
[NOTE]
====
The book is organized to be read in the order but some chapters can be skipped depending on your experience.
We suggest to start with the Chapter 1 that introduces all the concepts discussed throughout the book.

If you are interested to write mobile applications, you can focus on Chapters 2 and 6 that present two different messaging protocols for mobile devices.
If you are writing Web applications, the Chapters 3 and 7 are the most relevant.

If you are interested to use the STOMP protocol, the Chapters 2, 3, 4, and 5 and the most relevant. If you are interested by MQTT instead, you can read the Chapters 6, 7, and 8 instead.
====

=== Administrative Notes

This book is an introduction to the STOMP and MQTT messaging protocols and assumes no prior experience with them.
This books explains in details the messaging protocols. Each platform's clients may provide a different API to deal with the protocols but the underlying concepts will remain the same.
For both protocols, we will see two different libraries: an Objective-C library for iOS and a JavacScript library for Web applications.

Basic programming skills are required. The examples in the book runs on different platforms and we used the programming language that made the most sense for each of them.

To build a mobile application on iOS, we wrote the examples using Objective-C.
The graphical application requires minimal knowledge of Xcode and Interface Builder but all the changes are described step by step in the book.

The Web applications use the JavaScript language. We leverage http://jquery.com[jQuery] to make the Web applications interactive and manipulate the page elements but the messaging code is independent of any JavaScript frameworks.

The examples can all be downloaded from the https://github.com/mobile-web-messaging/code/[book's GitHub repository].

=== Conventions Used in This Book

The following typographical conventions are used in this book:

_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.

**`Constant width bold`**:: Shows commands or other text that should be typed literally by the user.

_++Constant width italic++_:: Shows text that should be replaced with user-supplied values or by values determined by context.

[TIP]
====
This icon signifies a tip, suggestion, or general note.
====

[WARNING]
====
This icon indicates a warning or caution.
====

=== Using Code Examples
++++
<remark>PROD: Please reach out to author to find out if they will be uploading code examples to oreilly.com or their own site (e.g., GitHub). If there is no code download, delete this whole section.</remark>
++++

Supplemental material (code examples, exercises, etc.) is available for download at link:$$http://examples.oreilly.com/<ISBN>-files/$$[].

This book is here to help you get your job done. In general, if example code is offered with this book, you may use it in your programs and documentation. You do not need to contact us for permission unless you’re reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from O’Reilly books does require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission.

We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: “_Book Title_ by Some Author (O’Reilly). Copyright 2012 Some Copyright Holder, 978-0-596-xxxx-x.”

If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at pass:[<email>permissions@oreilly.com</email>].

=== Safari® Books Online

[role = "safarienabled"]
[NOTE]
====
pass:[<ulink role="orm:hideurl:ital" url="http://my.safaribooksonline.com/?portal=oreilly">Safari Books Online</ulink>] is an on-demand digital library that delivers expert pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/content">content</ulink>] in both book and video form from the world&#8217;s leading authors in technology and business.
====

Technology professionals, software developers, web designers, and business and creative professionals use Safari Books Online as their primary resource for research, problem solving, learning, and certification training.

Safari Books Online offers a range of pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/subscriptions">product mixes</ulink>] and pricing programs for pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/organizations-teams">organizations</ulink>], pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/government">government agencies</ulink>], and pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/individuals">individuals</ulink>]. Subscribers have access to thousands of books, training videos, and prepublication manuscripts in one fully searchable database from publishers like O’Reilly Media, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, Course Technology, and dozens pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/publishers">more</ulink>]. For more information about Safari Books Online, please visit us pass:[<ulink role="orm:hideurl" url="http://www.safaribooksonline.com/">online</ulink>].

=== How to Contact Us

Please address comments and questions concerning this book to the publisher:

++++
<simplelist>
<member>O’Reilly Media, Inc.</member>
<member>1005 Gravenstein Highway North</member>
<member>Sebastopol, CA 95472</member>
<member>800-998-9938 (in the United States or Canada)</member>
<member>707-829-0515 (international or local)</member>
<member>707-829-0104 (fax)</member>
</simplelist>
++++

We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at link:$$http://www.oreilly.com/catalog/<catalog page>$$[].

++++
<remark>Don't forget to update the link above.</remark>
++++

To comment or ask technical questions about this book, send email to pass:[<email>bookquestions@oreilly.com</email>].

For more information about our books, courses, conferences, and news, see our website at link:$$http://www.oreilly.com$$[].

Find us on Facebook: link:$$http://facebook.com/oreilly$$[]

Follow us on Twitter: link:$$http://twitter.com/oreillymedia$$[]

Watch us on YouTube: link:$$http://www.youtube.com/oreillymedia$$[]

=== Acknowledgments

++++
<remark>Fill in...</remark>
++++
